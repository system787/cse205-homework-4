3.2 -

recursiveMergeSort() is called 11 times including the initial one when sorting the list of {5, 3, 1, 6, 2, 4} used in example 3.1

3.5 -

list = { 5, 4, 2, 9, 5, 1, 7, 3, 8, 6 }, pivot = 5, leftIndex = -1, rightIndex = 10

While loop pass: 1
leftIndex ends up at 0 rightIndex ends up at 7
leftIndex < rightIndex so swap list[0] and list[7]: list = { 3, 4, 2, 9, 5, 1, 7, 5, 8, 6 }

While loop pass: 2
leftIndex ends up at 3 rightIndex ends up at 5
leftIndex < rightIndex so swap list[3] and list[5]: list = { 3, 4, 2, 1, 5, 9, 7, 5, 8, 6 }

While loop pass: 3
leftIndex ends up at 4 rightIndex ends up at 4
While loop terminates because leftIndex: 4 is >= rightIndex: 4
partition() returns 4 so leftList = { 3, 4, 2, 0 }, rightList = { 5, 9, 7, 5, 8, 0 }

4.1 - Included in zip

4.3 - Included in Zip

5.1 -
(a) 5, 6, 2, 9
(b) 3, 7
(c) 5, 9, 1, 4
(d) 7, 8, 6, 2, 3

5.2 -
(c) preorder traversal: 7 -> 8 -> 5 -> 6 -> 2 -> 9 -> 3 -> 1 -> 4

5.3 -

